"use strict";angular.module("time-input",[]).directive("timeInput",[function(){return{template:'<input type="number" class="hours" placeholder="HH" min="0" max="23"><span class="separator"></span><input type="number" class="minutes" placeholder="MM" min="0" max="59"><span class="separator"></span><input type="number" class="seconds" placeholder="SS" min="0" max="59">',restrict:"C",require:"ngModel",controller:["$scope",function($scope){}],link:function(scope,element,attrs,ngModel){function leadingZero(value){return value=parseInt(value,10),value<10?"0"+value:""+value}function shouldUpdateOnChange(){return"change"===options.updateOn}function updateModel(){ngModel.$viewValue.setHours(parseInt($hoursInput.val(),10)),ngModel.$viewValue.setMinutes(parseInt($minutesInput.val(),10)),options.seconds!==!1&&ngModel.$viewValue.setSeconds(parseInt($secondsInput.val(),10)),ngModel.$setViewValue(ngModel.$viewValue),ngModel.$commitViewValue()}function inputChange(elem,varName){return function(){if(!elem.value||isNaN(elem.value))return elem.value="00",updateModel(),void $(elem).select();if(elem.value.length>2)switch(varName){case"hours":elem.value=leadingZero(ngModel.$viewValue.getHours());break;case"minutes":elem.value=leadingZero(ngModel.$viewValue.getMinutes());break;case"seconds":elem.value=leadingZero(ngModel.$viewValue.getSeconds())}else Number(elem.value)>Number(elem.getAttribute("max"))&&(elem.value=elem.value[0]),shouldUpdateOnChange()&&updateModel()}}function onKeyUp($nextInput){return function(event){var key=keyboardMap[event.keyCode],permitted=["1","2","3","4","5","6","7","8","9","0","NUMPAD1","NUMPAD2","NUMPAD3","NUMPAD4","NUMPAD5","NUMPAD6","NUMPAD7","NUMPAD8","NUMPAD9","NUMPAD0"];("ENTER"===key||permitted.indexOf(key)>=0&&Number(event.target.value)>9)&&($nextInput.focus(),$nextInput.select())}}function onBlurInput(){element.removeClass("focused"),this.value=leadingZero(Number(this.value)),updateModel()}var $secondsInput,options=ngModel.$options||{},$inputs=element.find("input"),$hoursInput=$inputs.eq(0),$minutesInput=$inputs.eq(1);options.seconds!==!1?$secondsInput=$inputs.eq(2):element.find("span.separator:last, input.seconds").remove(),$inputs.on("click",function(){this.select()}),$inputs.on("focus",function(){element.addClass("focused")}),$inputs.on("mousewheel",function(){}),$inputs.on("keydown",function(event){var key=keyboardMap[event.keyCode],permitted=["1","2","3","4","5","6","7","8","9","0","NUMPAD1","NUMPAD2","NUMPAD3","NUMPAD4","NUMPAD5","NUMPAD6","NUMPAD7","NUMPAD8","NUMPAD9","NUMPAD0","LEFT","RIGHT","UP","DOWN","DELETE","BACKSPACE","ENTER","SHIFT","TAB"];permitted.indexOf(key)===-1&&event.preventDefault()}),$inputs.on("paste cut",function(event){event.preventDefault()}),ngModel.$render=function(){var date=ngModel.$viewValue;$hoursInput.val(leadingZero(date.getHours())),$minutesInput.val(leadingZero(date.getMinutes())),options.seconds!==!1&&$secondsInput.val(leadingZero(date.getSeconds()))},scope.$watch(attrs.disable,function(newVal){newVal?($hoursInput.attr("disabled","disabled"),$minutesInput.attr("disabled","disabled"),options.seconds!==!1&&$secondsInput.attr("disabled","disabled")):($hoursInput.removeAttr("disabled"),$minutesInput.removeAttr("disabled"),options.seconds!==!1&&$secondsInput.removeAttr("disabled"))}),$hoursInput.on("input",inputChange($hoursInput.get(0),"hours")),$minutesInput.on("input",inputChange($minutesInput.get(0),"minutes")),$hoursInput.on("keyup",onKeyUp($minutesInput)),$hoursInput.on("blur",onBlurInput.bind($hoursInput.get(0))),$minutesInput.on("blur",onBlurInput.bind($minutesInput.get(0))),options.seconds!==!1&&($minutesInput.on("keyup",onKeyUp($secondsInput)),$secondsInput.on("input",inputChange($secondsInput.get(0),"seconds")),$secondsInput.on("blur",onBlurInput.bind($secondsInput.get(0))))}}}]);
//# sourceMappingURL=time-input.min.js.map