"use strict";angular.module("time-input",[]).directive("timeInput",[function(){return{template:'<input type="number" class="hour" placeholder="HH" min="0" max="24">:<input type="number" min="0" max="60" class="minute" placeholder="MM">',restrict:"C",require:"ngModel",link:function(scope,element,attrs,ngModel){function format(value){return value<10?"0"+value:""+value}function shouldUpdateOnChange(){return!(ngModel.$options&&ngModel.$options.updateOn&&ngModel.$options.updateOn.indexOf("default")===-1)}function updateModel(e){afterBlur=!!e;var date=ngModel.$viewValue;date.setMinutes(minutes),date.setHours(hours),ngModel.$setViewValue(date),ngModel.$commitViewValue()}function handleBlur(){""===$hourInput.val()&&$hourInput.val(format(hours)),""===$minuteInput.val()&&$minuteInput.val(format(minutes)),updateModel()}var afterBlur,$inputs=element.find("input"),$hourInput=$inputs.eq(0),$minuteInput=$inputs.eq(1),hours=0,minutes=0;scope.$watch(attrs.ngDisabled,function(value){$inputs.prop("disabled",value)}),scope.$watch(attrs.selectOnFocus,function(value){value&&$inputs.unbind("focus").bind("focus",function(){this.select()})}),ngModel.$render=function(){if(ngModel.$viewValue instanceof Date){var date=ngModel.$viewValue;hours=date.getHours(),minutes=date.getMinutes(),$hourInput.val(format(hours)),$minuteInput.val(format(minutes))}},$hourInput.on("change",function(){this.value&&!isNaN(this.value)&&(hours=Math.abs(Number(this.value))%24,this.value=format(hours),afterBlur||this.select(),shouldUpdateOnChange()&&updateModel())}),$minuteInput.on("change",function(){this.value&&!isNaN(this.value)&&(minutes=Math.abs(Number(this.value))%60,this.value=format(minutes),afterBlur||this.select(),shouldUpdateOnChange()&&updateModel())}),$hourInput.on("blur",handleBlur),$minuteInput.on("blur",handleBlur)}}}]);
//# sourceMappingURL=time-input.min.js.map